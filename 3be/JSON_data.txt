package tribe

import "encoding/json"

type Push_Register struct {
	Register string `json:"command"` // Should be REGISTER
	Fill     string `json:"fill"`    // fill with 32 random chars, to match the AES pad
}

type Push_NgList struct {
	Command string `json:"command"` // Should be "MYGROUPS"
	Groups  string `json:Groups"`   // Grouplist encrypted with AES
	Fill    string `json:"fill"`    // fill with 32 random chars, to match the AES pad
}

type Push_MSGList struct {
	Command string   `json:"command"`  // Should be MSGLIST
	List    []string `json:MessageID"` // List of MessageID
	Fill    string   `json:"fill"`     // fill with 32 random chars, to match the AES pad
}

type Push_PEERList struct {
	Command string `json:"command"` // Should be PEERLIST
	List    string `json:PEERS"`    // List of PEERS
	Fill    string `json:"fill"`    // fill with 32 random chars, to match the AES pad
}

//
// Here the pull requests
//

type Pull_PeerList struct {
	Command string `json:"command"` // Should be GIMME-PEER
	Fill    string `json:"fill"`    // fill with 32 random chars, to match the AES pad

}

type Pul_MSGList struct {
	Command string `json:"command"` // Should be GIMME-MESSAGELIST
	Group   string `json:"command"` // name of the group
	Fill    string `json:"fill"`    // fill with 32 random chars, to match the AES pad

}

type Pull_FullMSG struct {
	Command string `json:"command"` // Should be GIMME-FULLMSG
	Message string `json:"id"`      // name of the group
	Fill    string `json:"fill"`    // fill with 32 random chars, to match the AES pad
}

type Pull_NGList struct {
	Command string `json:"command"` // Should be GIMME-GROUPLIST
	Fill    string `json:"fill"`    // fill with 32 random chars, to match the AES pad
}
